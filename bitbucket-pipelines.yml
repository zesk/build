#
# Zesk Build BitBucket Pipeline
#
# Copyright &copy; 2025 Market Acumen Inc.
#
# Requires: docker
#
# - 8x costs 8x the cost, speedup is 10% or so as most tests are I/O bound
# - 2x is adequate for Bitbucket Pipelines
#
# otherwise tests fail with `interrupt` when memory runs out (I assume)
#
image: atlassian/default-image:4

pipelines:
  branches:
    docs:
      - step:
          deployment: documentation
          name: Build documentation
          size: 2x
          services:
            - docker
          script:
            - bin/documentation.sh
    staging:
      - step:
          deployment: staging
          name: Build and Test
          services:
            - docker
          script:
            - bin/build.sh
            - bin/test.sh --skip-tag package-install --skip-tag slow
    main:
      - step:
          deployment: production
          name: Build, Test, and Deploy
          size: 2x
          services:
            - docker
          artifacts:
            - test.stats
          script:
            - bin/test.sh --skip-tag package-install
            - bin/build.sh
            - bin/deploy.sh
    deploy:
      - step:
          deployment: deploy
          name: Just Deploy
          size: 2x
          services:
            - docker
          script:
            - bin/build.sh
            - bin/deploy.sh
    test:
      - step:
          deployment: test
          name: Just Test
          size: 2x
          artifacts:
            - test.stats
            - .last-run-test
          services:
            - docker
          script:
            - IFS=' ' read -r -a aa < <(printf "%s\n" "${BUILD_TEST_ARGUMENTS-}")
            - TEST_PLUMBER=true BUILD_DEBUG="${BUILD_DEBUG-%,},usage" bin/test.sh "${aa[@]+"${aa[@]}"}"
    coverage:
      - step:
          deployment: coverage
          name: Coverage stats
          size: 2x
          artifacts:
            - test.stats
            - coverage.stats.gz
          services:
            - docker
          script:
            - bin/test.sh --coverage
            - ls -la coverage.stats
            - sort < coverage.stats | uniq -c | sort -rn > coverage.stats.uniq
            - mv -f coverage.stats.uniq coverage.stats
            - ls -la coverage.stats
            - gzip coverage.stats
